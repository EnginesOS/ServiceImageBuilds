eap {

default_eap_type = ttls
timer_expire     = 60

#  There are many EAP types, but the server has support

ignore_unknown_eap_types = no		
cisco_accounting_username_bug = no

# Supported EAP-types

#
#  We do NOT recommend using EAP-MD5 authentication
#  for wireless connections.  It is insecure, and does
#  not provide for dynamic WEP keys.
#
 md5 {
 }


#  Generic Token Card.
#
#  Currently, this is only permitted inside of EAP-TTLS,
#  or EAP-PEAP.  The module "challenges" the user with
#  text, and the response from the user is taken to be
#  the User-Password.
#
#  Proxying the tunneled EAP-GTC session is a bad idea,
#  the users password will go over the wire in plain-text,
#  for anyone to see.
#
 gtc {
	#  The default challenge, which many clients
	#  ignore..
	#challenge = "Password: "

	#  The plain-text response which comes back
	#  is put into a User-Password attribute,
	#  and passed to another module for
	#  authentication.  This allows the EAP-GTC
	#  response to be checked against plain-text,
	#  or crypt'd passwords.
	#
	#  If you say "Local" instead of "PAP", then
	#  the module will look for a User-Password
	#  configured for the request, and do the
	#  authentication itself.
	#
	auth_type = PAP
 }

## EAP-TLS
#
#  To generate ctest certificates, run the script
#
#	../scripts/certs.sh
#
#  The documents on http://www.freeradius.org/doc
#  are old, but may be helpful.
#
#  See also:
#
#  http://www.dslreports.com/forum/remark,9286052~mode=flat
#
tls {
  	#private_key_password = whatever
  	private_key_file = /home/engines/etc/ssl/keys/radius.key
  
  	#  If Private key & Certificate are located in
  	#  the same file, then private_key_file &
  	#  certificate_file must contain the same file
  	#  name.
  	certificate_file = /home/engines/etc/ssl/certs/radius.crt
  
  	#  Trusted Root CA list
  	CA_file = /home/engines/etc/ssl/CA/engines_internal_ca.crt
  
  	dh_file = ${raddbdir}/certs/dh
  	random_file = ${raddbdir}/certs/random
  
  	#
  	#  This can never exceed the size of a RADIUS
  	#  packet (4096 bytes), and is preferably half
  	#  that, to accomodate other attributes in
  	#  RADIUS packet.  On most APs the MAX packet
  	#  length is configured between 1500 - 1600
  	#  In these cases, fragment size should be
  	#  1024 or less.
  	#
  	fragment_size = 1024
  
  	#  include_length is a flag which is
  	#  by default set to yes If set to
  	#  yes, Total Length of the message is
  	#  included in EVERY packet we send.
  	#  If set to no, Total Length of the
  	#  message is included ONLY in the
  	#  First packet of a fragment series.
  	#
  	include_length = yes
  
  	#  Check the Certificate Revocation List
  	#
  	#  1) Copy CA certificates and CRLs to same directory.
  	#  2) Execute 'c_rehash <CA certs&CRLs Directory>'.
  	#    'c_rehash' is OpenSSL's command.
  	#  3) Add 'CA_path=<CA certs&CRLs directory>'
  	#      to radiusd.conf's tls section.
  	#  4) uncomment the line below.
  	#  5) Restart radiusd
  #	check_crl = yes
  
         #
         #  If check_cert_issuer is set, the value will
         #  be checked against the DN of the issuer in
         #  the client certificate.  If the values do not
         #  match, the cerficate verification will fail,
         #  rejecting the user.
         #
  #       check_cert_issuer = "/C=GB/ST=Berkshire/L=Newbury/O=My Company Ltd"
  
         #
         #  If check_cert_cn is set, the value will
         #  be xlat'ed and checked against the CN
         #  in the client certificate.  If the values
         #  do not match, the certificate verification
         #  will fail rejecting the user.
         #
         #  This check is done only if the previous
         #  "check_cert_issuer" is not set, or if
         #  the check succeeds.
         #
  #	check_cert_cn = %{User-Name}
  #
  	# Set this option to specify the allowed
  	# TLS cipher suites.  The format is listed
  	# in "man 1 ciphers".
  #	cipher_list = "DEFAULT"
 }

#  The TTLS module implements the EAP-TTLS protocol,
#  which can be described as EAP inside of Diameter,
#  inside of TLS, inside of EAP, inside of RADIUS...
#
#  Surprisingly, it works quite well.
#
#  The TTLS module needs the TLS module to be installed
#  and configured, in order to use the TLS tunnel
#  inside of the EAP packet.  You will still need to
#  configure the TLS module, even if you do not want
#  to deploy EAP-TLS in your network.  Users will not
#  be able to request EAP-TLS, as it requires them to
#  have a client certificate.  EAP-TTLS does not
#  require a client certificate.
#
 ttls {
	#  The tunneled EAP session needs a default
	#  EAP type which is separate from the one for
	#  the non-tunneled EAP module.  Inside of the
	#  TTLS tunnel, we recommend using EAP-MD5.
	#  If the request does not contain an EAP
	#  conversation, then this configuration entry
	#  is ignored.
	default_eap_type = md5

	#  The tunneled authentication request does
	#  not usually contain useful attributes
	#  like 'Calling-Station-Id', etc.  These
	#  attributes are outside of the tunnel,
	#  and normally unavailable to the tunneled
	#  authentication request.
	#
	#  By setting this configuration entry to
	#  'yes', any attribute which NOT in the
	#  tunneled authentication request, but
	#  which IS available outside of the tunnel,
	#  is copied to the tunneled request.
	#
	# allowed values: {no, yes}
	copy_request_to_tunnel = yes

	#  The reply attributes sent to the NAS are
	#  usually based on the name of the user
	#  'outside' of the tunnel (usually
	#  'anonymous').  If you want to send the
	#  reply attributes based on the user name
	#  inside of the tunnel, then set this
	#  configuration entry to 'yes', and the reply
	#  to the NAS will be taken from the reply to
	#  the tunneled request.
	#
	# allowed values: {no, yes}
	use_tunneled_reply = yes
 }

}
